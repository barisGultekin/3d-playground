/* eslint-disable react/no-unknown-property */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/assembly.gltf 
*/

import { useGLTF } from "@react-three/drei";
import { useTexture } from "@react-three/drei";

import * as THREE from "three";

import { useCustomization } from "../contexts/Customization";

const Assembly = (props) => {
  const {material, accessory, mainColor, accessoryColor} = useCustomization();
  const { nodes, materials } = useGLTF("/models/assembly.gltf");

  const leatherTextureProps = useTexture({
    normalMap: "/textures/leather/Leather_008_Normal.jpg",
    roughnessMap: "/textures/leather/Leather_008_Roughness.jpg",
    aoMap: "/textures/leather/Leather_008_Ambient Occlusion.jpg",
  });

  const leatherRepeater = 0.3;
  leatherTextureProps.normalMap.repeat.set(leatherRepeater, leatherRepeater);
  leatherTextureProps.roughnessMap.repeat.set(leatherRepeater, leatherRepeater);
  leatherTextureProps.aoMap.repeat.set(leatherRepeater, leatherRepeater);

  leatherTextureProps.normalMap.wrapS = leatherTextureProps.normalMap.wrapT =
    THREE.RepeatWrapping;
  leatherTextureProps.roughnessMap.wrapS =
    leatherTextureProps.roughnessMap.wrapT = THREE.RepeatWrapping;
  leatherTextureProps.aoMap.wrapS = leatherTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;

    const alcantaraTextureProps = useTexture({
      map: "/textures/alcantara/Fabric_Alcantara_001_basecolor.jpg",
      normalMap: "/textures/alcantara/Fabric_Alcantara_001_normal.jpg",
      roughnessMap: "/textures/alcantara/Fabric_Alcantara_001_roughness.jpg",
      aoMap: "/textures/alcantara/Fabric_Alcantara_001_ambientOcclusion.jpg",
    });
  
    const alcantaraRepeater = 0.5;
    alcantaraTextureProps.map.repeat.set(alcantaraRepeater, alcantaraRepeater);
    alcantaraTextureProps.normalMap.repeat.set(alcantaraRepeater, alcantaraRepeater);
    alcantaraTextureProps.roughnessMap.repeat.set(alcantaraRepeater, alcantaraRepeater);
    alcantaraTextureProps.aoMap.repeat.set(alcantaraRepeater, alcantaraRepeater);
  
    alcantaraTextureProps.map.wrapS = alcantaraTextureProps.map.wrapT =
      THREE.RepeatWrapping;
    alcantaraTextureProps.normalMap.wrapS = alcantaraTextureProps.normalMap.wrapT =
      THREE.RepeatWrapping;
    alcantaraTextureProps.roughnessMap.wrapS =
      alcantaraTextureProps.roughnessMap.wrapT = THREE.RepeatWrapping;
    alcantaraTextureProps.aoMap.wrapS = alcantaraTextureProps.aoMap.wrapT =
      THREE.RepeatWrapping;

  const concreteTextureProps = useTexture({
    
    normalMap: "/textures/concrete/Concrete_Wall_010_normal.jpg",
    roughnessMap: "/textures/concrete/Concrete_Wall_010_roughness.jpg",
    aoMap: "/textures/concrete/Concrete_Wall_010_ambientOcclusion.jpg",
  });

  const concreteRepeater = 0.5;
  
  concreteTextureProps.normalMap.repeat.set(concreteRepeater, concreteRepeater);
  concreteTextureProps.roughnessMap.repeat.set(concreteRepeater, concreteRepeater);
  concreteTextureProps.aoMap.repeat.set(concreteRepeater, concreteRepeater);

  
  concreteTextureProps.normalMap.wrapS = concreteTextureProps.normalMap.wrapT =
    THREE.RepeatWrapping;
  concreteTextureProps.roughnessMap.wrapS =
    concreteTextureProps.roughnessMap.wrapT = THREE.RepeatWrapping;
  concreteTextureProps.aoMap.wrapS = concreteTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;



  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Body1.geometry}>
        <meshStandardMaterial {...concreteTextureProps} color={mainColor.color}/>
      </mesh>
      <mesh
        geometry={nodes.Body11.geometry}
        material={materials["Steel_-_Satin"]}
        visible={accessory === 1}
      >
        <meshStandardMaterial {...(material === "leather" ? leatherTextureProps : alcantaraTextureProps)}/>
      </mesh>
      <mesh
        geometry={nodes.Body12.geometry}
        material={materials["Steel_-_Satin"]}
        visible={accessory === 2}
      >
        <meshStandardMaterial {...(material === "leather" ? leatherTextureProps : alcantaraTextureProps)} />
      </mesh>
    </group>
  );
};

useGLTF.preload("/assembly.gltf");

export default Assembly;
